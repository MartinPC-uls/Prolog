//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ghanv\source\repos\Interprete\Interprete\prolog.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interprete {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="prologParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IprologVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>clausula</c>
	/// labeled alternative in <see cref="prologParser.clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClausula([NotNull] prologParser.ClausulaContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>lista_termvar</c>
	/// labeled alternative in <see cref="prologParser.termlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLista_termvar([NotNull] prologParser.Lista_termvarContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>lista_term</c>
	/// labeled alternative in <see cref="prologParser.termlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLista_term([NotNull] prologParser.Lista_termContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>prolog</c>
	/// labeled alternative in <see cref="prologParser.p_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProlog([NotNull] prologParser.PrologContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>compound_term</c>
	/// labeled alternative in <see cref="prologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompound_term([NotNull] prologParser.Compound_termContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>backq_string</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBackq_string([NotNull] prologParser.Backq_stringContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>cut</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCut([NotNull] prologParser.CutContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>empty_braces</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmpty_braces([NotNull] prologParser.Empty_bracesContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>dq_string</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDq_string([NotNull] prologParser.Dq_stringContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>name</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitName([NotNull] prologParser.NameContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>quoted_string</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuoted_string([NotNull] prologParser.Quoted_stringContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>empty_list</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmpty_list([NotNull] prologParser.Empty_listContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>graphic</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGraphic([NotNull] prologParser.GraphicContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>semicolon</c>
	/// labeled alternative in <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSemicolon([NotNull] prologParser.SemicolonContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>directiva</c>
	/// labeled alternative in <see cref="prologParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirectiva([NotNull] prologParser.DirectivaContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="prologParser.p_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitP_text([NotNull] prologParser.P_textContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="prologParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirective([NotNull] prologParser.DirectiveContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="prologParser.clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClause([NotNull] prologParser.ClauseContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="prologParser.termlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTermlist([NotNull] prologParser.TermlistContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="prologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerm([NotNull] prologParser.TermContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="prologParser.operator_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperator_([NotNull] prologParser.Operator_Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="prologParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAtom([NotNull] prologParser.AtomContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="prologParser.integer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInteger([NotNull] prologParser.IntegerContext context);
}
} // namespace Interprete
