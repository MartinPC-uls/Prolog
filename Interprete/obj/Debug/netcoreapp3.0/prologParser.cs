//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ghanv\source\repos\Interprete\Interprete\prolog.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interprete {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class prologParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, LETTER_DIGIT=52, 
		VARIABLE=53, DECIMAL=54, BINARY=55, OCTAL=56, HEX=57, CHARACTER_CODE_CONSTANT=58, 
		FLOAT=59, GRAPHIC_TOKEN=60, QUOTED=61, DOUBLE_QUOTED_LIST=62, BACK_QUOTED_STRING=63, 
		WS=64, COMMENT=65, MULTILINE_COMMENT=66;
	public const int
		RULE_p_text = 0, RULE_directive = 1, RULE_clause = 2, RULE_termlist = 3, 
		RULE_term = 4, RULE_operator_ = 5, RULE_atom = 6, RULE_integer = 7;
	public static readonly string[] ruleNames = {
		"p_text", "directive", "clause", "termlist", "term", "operator_", "atom", 
		"integer"
	};

	private static readonly string[] _LiteralNames = {
		null, "':-'", "'.'", "','", "'('", "')'", "'-'", "'['", "'|'", "']'", 
		"'{'", "'}'", "'-->'", "'?-'", "'dynamic'", "'multifile'", "'discontiguous'", 
		"'public'", "';'", "'->'", "'\\+'", "'='", "'\\='", "'=='", "'\\=='", 
		"'@<'", "'@=<'", "'@>'", "'@>='", "'=..'", "'is'", "'=:='", "'=\\='", 
		"'<'", "'=<'", "'>'", "'>='", "':'", "'+'", "'/\\'", "'\\/'", "'*'", "'/'", 
		"'//'", "'rem'", "'mod'", "'<<'", "'>>'", "'**'", "'^'", "'\\'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "LETTER_DIGIT", "VARIABLE", "DECIMAL", "BINARY", 
		"OCTAL", "HEX", "CHARACTER_CODE_CONSTANT", "FLOAT", "GRAPHIC_TOKEN", "QUOTED", 
		"DOUBLE_QUOTED_LIST", "BACK_QUOTED_STRING", "WS", "COMMENT", "MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "prolog.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public prologParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class P_textContext : ParserRuleContext {
		public P_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_p_text; } }
	 
		public P_textContext() { }
		public virtual void CopyFrom(P_textContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrologContext : P_textContext {
		public ITerminalNode Eof() { return GetToken(prologParser.Eof, 0); }
		public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		public ClauseContext[] clause() {
			return GetRuleContexts<ClauseContext>();
		}
		public ClauseContext clause(int i) {
			return GetRuleContext<ClauseContext>(i);
		}
		public PrologContext(P_textContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterProlog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitProlog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProlog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public P_textContext p_text() {
		P_textContext _localctx = new P_textContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_p_text);
		int _la;
		try {
			_localctx = new PrologContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__9) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << LETTER_DIGIT) | (1L << VARIABLE) | (1L << DECIMAL) | (1L << BINARY) | (1L << OCTAL) | (1L << HEX) | (1L << CHARACTER_CODE_CONSTANT) | (1L << FLOAT) | (1L << GRAPHIC_TOKEN) | (1L << QUOTED) | (1L << DOUBLE_QUOTED_LIST) | (1L << BACK_QUOTED_STRING))) != 0)) {
				{
				State = 18;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 16; directive();
					}
					break;

				case 2:
					{
					State = 17; clause();
					}
					break;
				}
				}
				State = 22;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 23; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(T__0);
			State = 26; term(0);
			State = 27; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClauseContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClauseContext clause() {
		ClauseContext _localctx = new ClauseContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; term(0);
			State = 30; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermlistContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public TermlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterTermlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitTermlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermlistContext termlist() {
		TermlistContext _localctx = new TermlistContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_termlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; term(0);
			State = 37;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__2) {
				{
				{
				State = 33; Match(T__2);
				State = 34; term(0);
				}
				}
				State = 39;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Atom_termContext : TermContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Atom_termContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterAtom_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitAtom_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Binary_operatorContext : TermContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Operator_Context operator_() {
			return GetRuleContext<Operator_Context>(0);
		}
		public Binary_operatorContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterBinary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitBinary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unary_operatorContext : TermContext {
		public Operator_Context operator_() {
			return GetRuleContext<Operator_Context>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Unary_operatorContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Braced_termContext : TermContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Braced_termContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterBraced_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitBraced_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraced_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class List_termContext : TermContext {
		public TermlistContext termlist() {
			return GetRuleContext<TermlistContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public List_termContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterList_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitList_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : TermContext {
		public ITerminalNode VARIABLE() { return GetToken(prologParser.VARIABLE, 0); }
		public VariableContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : TermContext {
		public ITerminalNode FLOAT() { return GetToken(prologParser.FLOAT, 0); }
		public FloatContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Compound_termContext : TermContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public TermlistContext termlist() {
			return GetRuleContext<TermlistContext>(0);
		}
		public Compound_termContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterCompound_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitCompound_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Integer_termContext : TermContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Integer_termContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterInteger_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitInteger_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Curly_bracketed_termContext : TermContext {
		public TermlistContext termlist() {
			return GetRuleContext<TermlistContext>(0);
		}
		public Curly_bracketed_termContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterCurly_bracketed_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitCurly_bracketed_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurly_bracketed_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				_localctx = new VariableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 41; Match(VARIABLE);
				}
				break;

			case 2:
				{
				_localctx = new Braced_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 42; Match(T__3);
				State = 43; term(0);
				State = 44; Match(T__4);
				}
				break;

			case 3:
				{
				_localctx = new Integer_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 47;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__5) {
					{
					State = 46; Match(T__5);
					}
				}

				State = 49; integer();
				}
				break;

			case 4:
				{
				_localctx = new FloatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 51;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__5) {
					{
					State = 50; Match(T__5);
					}
				}

				State = 53; Match(FLOAT);
				}
				break;

			case 5:
				{
				_localctx = new Compound_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 54; atom();
				State = 55; Match(T__3);
				State = 56; termlist();
				State = 57; Match(T__4);
				}
				break;

			case 6:
				{
				_localctx = new Unary_operatorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 59; operator_();
				State = 60; term(4);
				}
				break;

			case 7:
				{
				_localctx = new List_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 62; Match(T__6);
				State = 63; termlist();
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__7) {
					{
					State = 64; Match(T__7);
					State = 65; term(0);
					}
				}

				State = 68; Match(T__8);
				}
				break;

			case 8:
				{
				_localctx = new Curly_bracketed_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 70; Match(T__9);
				State = 71; termlist();
				State = 72; Match(T__10);
				}
				break;

			case 9:
				{
				_localctx = new Atom_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 74; atom();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 83;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Binary_operatorContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 77;
					if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
					State = 78; operator_();
					State = 79; term(5);
					}
					} 
				}
				State = 85;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Operator_Context : ParserRuleContext {
		public Operator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterOperator_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitOperator_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_Context operator_() {
		Operator_Context _localctx = new Operator_Context(_ctx, State);
		EnterRule(_localctx, 10, RULE_operator_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__5) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Backq_stringContext : AtomContext {
		public ITerminalNode BACK_QUOTED_STRING() { return GetToken(prologParser.BACK_QUOTED_STRING, 0); }
		public Backq_stringContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterBackq_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitBackq_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackq_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CutContext : AtomContext {
		public CutContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterCut(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitCut(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCut(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Empty_bracesContext : AtomContext {
		public Empty_bracesContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterEmpty_braces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitEmpty_braces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_braces(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dq_stringContext : AtomContext {
		public ITerminalNode DOUBLE_QUOTED_LIST() { return GetToken(prologParser.DOUBLE_QUOTED_LIST, 0); }
		public Dq_stringContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterDq_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitDq_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDq_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameContext : AtomContext {
		public ITerminalNode LETTER_DIGIT() { return GetToken(prologParser.LETTER_DIGIT, 0); }
		public NameContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Quoted_stringContext : AtomContext {
		public ITerminalNode QUOTED() { return GetToken(prologParser.QUOTED, 0); }
		public Quoted_stringContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterQuoted_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitQuoted_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoted_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Empty_listContext : AtomContext {
		public Empty_listContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterEmpty_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitEmpty_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_list(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GraphicContext : AtomContext {
		public ITerminalNode GRAPHIC_TOKEN() { return GetToken(prologParser.GRAPHIC_TOKEN, 0); }
		public GraphicContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterGraphic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitGraphic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SemicolonContext : AtomContext {
		public SemicolonContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterSemicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitSemicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_atom);
		try {
			State = 99;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__6:
				_localctx = new Empty_listContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(T__6);
				State = 89; Match(T__8);
				}
				break;
			case T__9:
				_localctx = new Empty_bracesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; Match(T__9);
				State = 91; Match(T__10);
				}
				break;
			case LETTER_DIGIT:
				_localctx = new NameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; Match(LETTER_DIGIT);
				}
				break;
			case GRAPHIC_TOKEN:
				_localctx = new GraphicContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 93; Match(GRAPHIC_TOKEN);
				}
				break;
			case QUOTED:
				_localctx = new Quoted_stringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 94; Match(QUOTED);
				}
				break;
			case DOUBLE_QUOTED_LIST:
				_localctx = new Dq_stringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 95; Match(DOUBLE_QUOTED_LIST);
				}
				break;
			case BACK_QUOTED_STRING:
				_localctx = new Backq_stringContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 96; Match(BACK_QUOTED_STRING);
				}
				break;
			case T__17:
				_localctx = new SemicolonContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 97; Match(T__17);
				}
				break;
			case T__50:
				_localctx = new CutContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 98; Match(T__50);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(prologParser.DECIMAL, 0); }
		public ITerminalNode CHARACTER_CODE_CONSTANT() { return GetToken(prologParser.CHARACTER_CODE_CONSTANT, 0); }
		public ITerminalNode BINARY() { return GetToken(prologParser.BINARY, 0); }
		public ITerminalNode OCTAL() { return GetToken(prologParser.OCTAL, 0); }
		public ITerminalNode HEX() { return GetToken(prologParser.HEX, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IprologListener typedListener = listener as IprologListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprologVisitor<TResult> typedVisitor = visitor as IprologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL) | (1L << BINARY) | (1L << OCTAL) | (1L << HEX) | (1L << CHARACTER_CODE_CONSTANT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x44j\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x3\x2\x3\x2\a\x2\x15\n\x2\f\x2\xE\x2\x18\v\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5&\n\x5\f\x5\xE"+
		"\x5)\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x32\n\x6\x3"+
		"\x6\x3\x6\x5\x6\x36\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x45\n\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x5\x6N\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6T\n\x6\f"+
		"\x6\xE\x6W\v\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x5\b\x66\n\b\x3\t\x3\t\x3\t\x2\x2\x3\n\n\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x2\x4\x6\x2\x3\x3\x5\x5\b\b\xE\x34\x3\x2"+
		"\x38<x\x2\x16\x3\x2\x2\x2\x4\x1B\x3\x2\x2\x2\x6\x1F\x3\x2\x2\x2\b\"\x3"+
		"\x2\x2\x2\nM\x3\x2\x2\x2\fX\x3\x2\x2\x2\xE\x65\x3\x2\x2\x2\x10g\x3\x2"+
		"\x2\x2\x12\x15\x5\x4\x3\x2\x13\x15\x5\x6\x4\x2\x14\x12\x3\x2\x2\x2\x14"+
		"\x13\x3\x2\x2\x2\x15\x18\x3\x2\x2\x2\x16\x14\x3\x2\x2\x2\x16\x17\x3\x2"+
		"\x2\x2\x17\x19\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x19\x1A\a\x2\x2\x3\x1A"+
		"\x3\x3\x2\x2\x2\x1B\x1C\a\x3\x2\x2\x1C\x1D\x5\n\x6\x2\x1D\x1E\a\x4\x2"+
		"\x2\x1E\x5\x3\x2\x2\x2\x1F \x5\n\x6\x2 !\a\x4\x2\x2!\a\x3\x2\x2\x2\"\'"+
		"\x5\n\x6\x2#$\a\x5\x2\x2$&\x5\n\x6\x2%#\x3\x2\x2\x2&)\x3\x2\x2\x2\'%\x3"+
		"\x2\x2\x2\'(\x3\x2\x2\x2(\t\x3\x2\x2\x2)\'\x3\x2\x2\x2*+\b\x6\x1\x2+N"+
		"\a\x37\x2\x2,-\a\x6\x2\x2-.\x5\n\x6\x2./\a\a\x2\x2/N\x3\x2\x2\x2\x30\x32"+
		"\a\b\x2\x2\x31\x30\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2"+
		"\x33N\x5\x10\t\x2\x34\x36\a\b\x2\x2\x35\x34\x3\x2\x2\x2\x35\x36\x3\x2"+
		"\x2\x2\x36\x37\x3\x2\x2\x2\x37N\a=\x2\x2\x38\x39\x5\xE\b\x2\x39:\a\x6"+
		"\x2\x2:;\x5\b\x5\x2;<\a\a\x2\x2<N\x3\x2\x2\x2=>\x5\f\a\x2>?\x5\n\x6\x6"+
		"?N\x3\x2\x2\x2@\x41\a\t\x2\x2\x41\x44\x5\b\x5\x2\x42\x43\a\n\x2\x2\x43"+
		"\x45\x5\n\x6\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\x46\x3\x2"+
		"\x2\x2\x46G\a\v\x2\x2GN\x3\x2\x2\x2HI\a\f\x2\x2IJ\x5\b\x5\x2JK\a\r\x2"+
		"\x2KN\x3\x2\x2\x2LN\x5\xE\b\x2M*\x3\x2\x2\x2M,\x3\x2\x2\x2M\x31\x3\x2"+
		"\x2\x2M\x35\x3\x2\x2\x2M\x38\x3\x2\x2\x2M=\x3\x2\x2\x2M@\x3\x2\x2\x2M"+
		"H\x3\x2\x2\x2ML\x3\x2\x2\x2NU\x3\x2\x2\x2OP\f\a\x2\x2PQ\x5\f\a\x2QR\x5"+
		"\n\x6\aRT\x3\x2\x2\x2SO\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2"+
		"\x2\x2V\v\x3\x2\x2\x2WU\x3\x2\x2\x2XY\t\x2\x2\x2Y\r\x3\x2\x2\x2Z[\a\t"+
		"\x2\x2[\x66\a\v\x2\x2\\]\a\f\x2\x2]\x66\a\r\x2\x2^\x66\a\x36\x2\x2_\x66"+
		"\a>\x2\x2`\x66\a?\x2\x2\x61\x66\a@\x2\x2\x62\x66\a\x41\x2\x2\x63\x66\a"+
		"\x14\x2\x2\x64\x66\a\x35\x2\x2\x65Z\x3\x2\x2\x2\x65\\\x3\x2\x2\x2\x65"+
		"^\x3\x2\x2\x2\x65_\x3\x2\x2\x2\x65`\x3\x2\x2\x2\x65\x61\x3\x2\x2\x2\x65"+
		"\x62\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x64\x3\x2\x2\x2\x66\xF\x3\x2"+
		"\x2\x2gh\t\x3\x2\x2h\x11\x3\x2\x2\x2\v\x14\x16\'\x31\x35\x44MU\x65";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Interprete
